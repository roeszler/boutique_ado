"""
Django settings for boutique project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

import dj_database_url

if os.path.exists('env.py'):
    import env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '')  # key with empty default value

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = 'DEVELOPMENT' in os.environ

ALLOWED_HOSTS = [
    'boutique-ado-sr.herokuapp.com',
    'localhost'
    ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # With SITE_ID = 1, used by the social account app to create the
    # proper callback URLs when connecting via social media accounts:
    'django.contrib.sites',
    'allauth',
    # he allauth account app that allows all the basic user account stuff like
    # logging in and out, user registration and password resets:
    'allauth.account',
    # Specifically handles logging in via social media providers like Facebook
    # and Google:
    'allauth.socialaccount',
    'home_app',
    'products_app',
    'bag_app',
    'checkout_app',
    'profiles_app',

    # Other
    'crispy_forms',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'boutique.urls'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                #allows allauth and django itself to access the HTTP 'request' object in our templates:
                'django.template.context_processors.request',  # required by allauth
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',  # To access the no image file in the media folder if a product doesn't have an image.
                'bag_app.contexts.bag_contents',  # context processor to make 'bag_contents' accessible to all templates 
            ],

            # A list to contain all the tags we want from crispy_forms to
            # be available in all our templates by default:
            'builtins': [
                'crispy_forms.templatetags.crispy_forms_tags',
                'crispy_forms.templatetags.crispy_forms_field',
            ]
        },
    },
]

# to tell it to store messages in the session
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    # Handles superusers logging into the admin which allauth doesn't handle,
    # so defers to the default django Code to handle it.
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    # Allowing users to log into our store via their email address
    'allauth.account.auth_backends.AuthenticationBackend',
]

# With 'django.contrib.sites', used by the social account app to create the
# proper callback URLs when connecting via social media accounts:
SITE_ID = 1

# Since by default allauth will send confirmation emails to any new accounts.
# We need to temporarily log those emails to the console so we can get the confirmation links:
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# is what tells allauth that we want to allow authentication using either usernames or emails:
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'

# These three make an email to be required to register for the site,
# verifying your email is mandatory and enter it twice:
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True

# minimum username length of four characters:
ACCOUNT_USERNAME_MIN_LENGTH = 4

LOGIN_URL = '/accounts/login/'
# LOGIN_REDIRECT_URL = '/success'
LOGIN_REDIRECT_URL = '/'

WSGI_APPLICATION = 'boutique.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# DATABASES = {
#     'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
# }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Tuple to tell Django where all our static files are located
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

# where all uploaded media files will go
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# when AWS true, collect static is run 
if 'USE_AWS' in os.environ:
    # Bucket Config
    AWS_STORAGE_BUCKET_NAME = 'boutique-ado-sr'
    AWS_S3_REGION_NAME = 'eu-north-1'
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

    # for static file storage we want to use our storage class we just created
    # in custom_storages.py and that the location it should save static or
    # media files is a folder called 'static' or 'media' respectively:

    STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    STATICFILES_LOCATION = 'static'
    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'
    MEDIAFILES_LOCATION = 'media'

    # When our project is deployed to Heroku:
    # Heroku will run 'python3 manage.py collectstatic' during the build process.
    # This will search through all our apps and project folders looking for static files.
    # and use the AWS_S3_CUSTOM_DOMAIN setting defined here, in conjunction
    # with our custom storage classes (DEFAULT_FILE_STORAGE and
    # STATICFILES_STORAGE) that tell it the location at that URL where we'd
    # like to save things:

    # Override static and media URLs in production
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ------------ Stripe

# To calculate delivery costs
FREE_DELIVERY_THRESHOLD = 100
STANDARD_DELIVERY_PERCENTAGE = 12

STRIPE_CURRENCY = 'usd'

# STRIPE_PUBLIC_KEY_BOUTIQUE = os.getenv('STRIPE_PUBLIC_KEY_BOUTIQUE', '')  # key with empty default value
# STRIPE_SECRET_KEY_BOUTIQUE = os.getenv('STRIPE_SECRET_KEY_BOUTIQUE', '')  # key with empty default value
# STRIPE_WH_SECRET = os.getenv('STRIPE_WH_SECRET', '')  # key with empty default value

STRIPE_PUBLIC_KEY_BOUTIQUE = os.environ.get('STRIPE_PUBLIC_KEY_BOUTIQUE', '')  # key with empty default value
STRIPE_SECRET_KEY_BOUTIQUE = os.environ.get('STRIPE_SECRET_KEY_BOUTIQUE', '')  # key with empty default value
STRIPE_WH_SECRET = os.environ.get('STRIPE_WH_SECRET', '')  # key with empty default value

DEFAULT_FROM_EMAIL = 'boutiquado@example.com'
